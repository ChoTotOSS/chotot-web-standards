name: Release
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - feat/update-release-flow
      
concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write # needed for git push / creating tags
  pull-requests: write # needed to update PRs (title, body, labels, comments)

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: PNPM setup
        uses: pnpm/action-setup@v3
        with:
          version: 8.6.0

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - name: Install Dependencies
        run: pnpm install

      - name: Log .npmrc BEFORE publish
        run: |
          echo "--- .npmrc before publish ---"
          if [ -f .npmrc ]; then
            sed 's/_authToken=.*/_authToken=***REDACTED***/' .npmrc
          else
            echo "No .npmrc found"
          fi

          TOKEN=$(sed -n 's/.*_authToken=\([^[:space:]]*\).*/\1/p' .npmrc | head -n1)
          LEN=${#TOKEN}
          if [ -z "$TOKEN" ]; then
            echo "TOKEN found: (none)"
          elif [ "$LEN" -le 12 ]; then
            echo "TOKEN found: ***"
          else
            MASKED="${TOKEN:0:8}$(printf '%*s' "$((LEN-12))" '' | tr ' ' '*')${TOKEN: -4}"
            echo "TOKEN found: $MASKED"
          fi

      - name: Create Release Pull Request
        uses: changesets/action@v1
        with:
          publish: pnpm release

      - name: Log .npmrc AFTER publish
        run: |
          echo "--- .npmrc after publish ---"
          if [ -f .npmrc ]; then
            sed 's/_authToken=.*/_authToken=***REDACTED***/' .npmrc
          else
            echo "No .npmrc found"
          fi

          TOKEN=$(sed -n 's/.*_authToken=\([^[:space:]]*\).*/\1/p' .npmrc | head -n1)
          LEN=${#TOKEN}
          if [ -z "$TOKEN" ]; then
            echo "TOKEN found: (none)"
          elif [ "$LEN" -le 12 ]; then
            echo "TOKEN found: ***"
          else
            MASKED="${TOKEN:0:8}$(printf '%*s' "$((LEN-12))" '' | tr ' ' '*')${TOKEN: -4}"
            echo "TOKEN found: $MASKED"
          fi
